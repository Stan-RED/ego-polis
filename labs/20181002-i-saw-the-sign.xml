<?xml-stylesheet type="text/xsl" href="/ui/default.xsl"?>
<resource
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:code="http://codesophy.org">

    <h1>TODO: I saw the sign</h1>

    <section title="Минус на минус">
        <p>
            Буквально десять лет назад в области разработки ПО была эпоха
            больших и величественных динозавров. По нашей планете величаво
            ходили такие гиганты как Rational Rose, Sybase PowerDesigner,
            BP/ERWin, восхищая нас своими UML, IDEF1X, XMI, SysML, etc. Мы все
            ждали наступления эры Semantic Web, RDF(s), OWL, SparQL, когда
            всё будет идти к доминированию разумных млекопитающих...
            Но пришла эра одноклеточных - JSON, YAML. Да простит мне читатель
            все эти метафоры, но на современную основу мироздания вроде
            <a href="https://schema.org/Thing">https://schema.org/Thing</a>,
            я не могу смотреть без слез.
        </p>

        <p>
            Что случилось? Системы стали настолько красивыми и лаконичными?
            Смотря на размер кодовой базы, приложений, показатели
            производительности... индуктивно у меня к такому выводу прийти
            не получается. Даже современные распределённые микро-сервисные
            решения, с некоторыми ретроспективными поправками, смотрятся уже
            не так изящно, когда копаешь глубже в реализацию, скажем, FIDOnet.
        </p>

        <em>
            Если бы кто-то изобрел алгоритм компрессии по аналогии с семейством
            LZ, который вместо строки ссылается на её упоминание ранее, только
            для кода. Чтобы каждая очередная реализация быстрой сортировки
            заменялась на ссылку. То весь код с
            <a href="https://github.com">https://github.com</a> можно было
            бы разместить на одной дискете.
        </em>

        <p>
            Может MDA/MDE (Model-driven Architecture, Model-driven Engineering)
            себя изжили? Принципиальное нет. Любого проектировщика разбуди
            посреди ночи и предложи ему эту задачу. Только заменив языки
            программирования, БД-скрипты, executable specifications, документацию
            и прочие виды репрезентации предметной области на более приземлённые
            сущности и он тут же грамотно применит MVC/MVVM/MVP и отделит модель
            от всего основного.
        </p>

        <p>
            С практической стороны экосистема всем свои видом кричит о том, что
            она в поиске. Новые языки и DSL появляются с такой скоростью, что
            кролики позавидуют. Постоянные попытки выстроить мосты  вроде ORM,
            doxygen, Gherkin в надежде, что это сработает. Даже того факта, что
            критические материалы вызывают наибольшее число откликов, уже о многом
            говорит.
        </p>

        <p>
            В какой-то момент мне показалось, что отвёты на все вопросы уже
            давно существуют, особенно в таких философских дисциплинах как
            эпистемология, гносеология, онтология (и ещё с добрый десяток
            более современных ответвлений). Но эти ребята даже за последние
            две с половиной тысячи лет не смогли договориться. Сам по себе
            факт непопулярности философии уже кричит о кризисе.
        </p>

        <p>
            Пока я стоял на этой развилке из двух бесперспективных направлений,
            меня посетила фраза Карла Поппера: <q>Я могу ошибаться, а вы можете
            быть правы; сделаем усилие, и мы, возможно, приблизимся к истине</q>.
            Не получится ли так, что минус на минус даст в итоге плюс?
        </p>

        <p>
            Когда эти Симплегады с шумом и грохотом сошлись, в моем сознания
            появилась идея Codesophy. Может ли философия дать современному
            инжинирингу хороший фундамент, а тот выступить в роли своеобразного
            веника для авгиев конюшен философии? Да, именно так. Я отдавал себе
            отчёт, что современная программная индустрия считает своим долгом
            создать как можно больше языков программирования, DSL, фреймворков
            и других продутов псевдоинтеллектуального труда. Подобным пристрастием
            страдали и философы, каждый из которых считал своим долгом создать
            новую философскую систему. Codesophy - это просто инициатива по
            наведению порядка. Которая, в идеале, должна очистить экосистему от
            мусора, а не привносить что-то новое.
        </p>
    </section>

    <section title="Разделываем философию">
        <p>
            Вторая мысль, которая меня посещяет при попытке понять философию
            (первая: <q>Да ну её в баню</q>) - ребятам не хватает SOLID.
            Такое ощущение, что люди, которые так много знают об абстракциях,
            обобщениях, индукциях и т.п., категорически не любят их применять.
            Сам факт наличия знаний их устраивает. Нас же спускает на землю
            необходимость работы с большими объемами знаний, поэтому волей-неволей
            приходится резать и кроить. Если бы Парменид зашел на Википедию, то
            только чтение списка дисциплин от эпистемологии, гносеологии, онтологии,
            таксономии до джастификационизма и различных сортов Knowledge
            management/engineering, заняло бы у него всю жизнь. И это, по идее,
            только небольшой сегмент знаний.
        </p>

        <p>
            Попробую привести пример такого "code smell" на примере SRP.
            Скажем, понятие истинности. По определению с этим замечательно
            справляется логика. Но оно постоянное будет всплывать везде.
            Скажем, некоторые авторы будут требовать истинности от знаний.
            И как инженер я не могу этого понять. Предположим, я прочитал
            в учебнике, что параллельные прямые не пересекаются. У меня
            есть определённое доверие к источнику, но не абсолютное. Но
            сказать, что я не получил знания, было бы глупо. Дополняя его
            информацией из других источников я приблизил бы значение почти
            к true, пока в один прекрасный момент не вышле бы из Евклидова
            пространства и то, что вроде казалось истиной стало ложью. Чтобы
            многие из нас сделали  как разработчик? Оопределили сигнатуру
            функции/интерфейс для проверки истинности и разнесли бы реализацию
            по разным инфраструктурным модулям: EuclideanPlugin и LobachevskyPlugin.
        </p>

        <p>
            Дизайн знаний должен быть таков, что переход от дискретной, булевой
            шкалы истинности к, скажем, Байесовской вероятности, которая определяет
            лишь степень уверенности в истинности суждения, должно быть простым,
            как смена "плагина".
        </p>

        <p>
            На него не должны влиять постоянные сражения сторонников эмпиризма и
            рационализма, которые - суть отдельный признак знаний, определяюший
            источник их получения. То, что в коде часто прячется за интерфейсами
            ISmthProvider.
        </p>
    </section>

    <section title="Словарь">
        <p>
            На наши сенсоры каждую секунду обрушивается огромное количество
            данных. Чтобы не утонуть в этом объеме, мы выделяем значимую
            информацию. А раз значимая, значит у неё есть некоторые (при)знаки,
            которые нас интересуют. Отсюда и первый термин.
        </p>

        <p>
            <strong>Знак/Sign</strong>. Этот термин мне кажется хорошим
            кандидатом как семантически, так и этимологически. ПоЗНАвая, мы
            выделяем ЗНАчимые (при)ЗНАки, которые формируют у нас ЗНАния,
            по которым мы можем впоследствии распоЗНАвать ЗНАкомые предметы.
        </p>

        <p>
            TODO:Семантически
        </p>

        <todo>
            <![CDATA[
		5. Sign -> Design/resign (disassembly, reengineering, method signature <-> class/type)
			1. -turus/-ture - собирательное из предметов, клавиатура, мускулатура.
			2. signal, signed, assign/resign, designate, significant, consign, insignia, signify, 
			3. "I saw se sign" пела в своё время группа Ace of Base.
			4. Сочетается с русским признак, значение, знание, знаковый (significant).
			5. Skill с тем же корнем (у нас навык/наука также?).
			6. Происходит от https://en.wiktionary.org/wiki/Reconstruction:Proto-Indo-European/(s)kelH-, что есть cut, что есть "разделяй и властвуй", разложить по полочкам.
			7. Возможно, от этого же корня scalping, skeleton, scala/scalable.
				1) На нас обрушивается поток знаний, мы их "режем". Математика и физика оставляет многое за скобками. Идеальное тело и прочие идеализации - абстракции?
            ]]>
        </todo>
    </section>
</resource>
