<?xml-stylesheet type="text/xsl" href="/ui/default.xsl"?>
<resource
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:code="http://codesophy.org">

    <code:scope uri="http://codesophy.org" />

    <h1>Codesophy</h1>

	<section>
		<p>
			Нахмуренная бровь или широкая улыбка, прищуренный глаз или высоко поднятые
			брови. Всё это, прежде всего, мимический код для обмена эмоциями. Настолько
			социально важный, что он перекочевал и в текстовый код, который мы называем
			смайликами.

			<translation xml:lang="en">
				Frowning brow or wide smile, narrowed eye or high raised eyebrows. All
				this, above all, a mimic code for our emotional interface. So socially
				important, that it migrated to the text code that we call smileys.
			</translation>
		</p>

		<p>
			Азбука Морзе и химические формулы, дорожные знаки и шрифт Брайля,
			государственные флаги и нотный стан, денежные купюры и привычные
			символы на пульте дистанционного управления. Обернитесь, коды окружают нас
			повсюду.
		</p>

		<p>
			Как сказать что-то человеку на расстоянии, на котором вы не можете
			до него докричаться? Закодировать ваше сообщение в электрические сигналы
			для передачи по сотовой сети. Или в абзуку Морзе, если из подручных средств
			у вас только фонарик. А если захочется чего-то винтажного, то можно
			и в текст письма, отправленного обычной почтой. Глухонемые закодируют
			сообщение жестами. <em>Код делает невозможное возможным.</em>
		</p>

		<p>
			Как легче дать понять водителю на оживленном перекрестке, может ли он
			продолжать движение? Закодировать тремя цветами сигналов светофора.
			Можно ли себе представить общение между математиками без использования
			формул? <em>Код делает сложное простым.</em>
		</p>

		<p>
			И только за это уже заслужил наше внимание. А он ещё корректирует ошибки,
			шифрует информацию, устраняет избыточность (сжатие данных) и выполняет
			легион других задач.
		</p>

		<p>
			Конечно, сам термин "код" больше на слуху благодаря дисциплине
			<term>Computer Science</term>. Именно она отвечает за такое кодирование
			наших помыслов и действий, результаты которого можно передать некоторым
			<term>Computing Unit</term> для исполнения вместо нас. А кто-то может
			вспомнить и такую дисципдину как теория кодирования.
		</p>

		<fun-fact>
			Аббревиатура CS для Computer Science и CodeSophy в чём-то похожа...
		</fun-fact>

		<p>
			Но, из наших рассуждений выше, становится очевидно, что сфера применения
			Codesophy намного шире. Попросту говоря - везде. И если философия ищет
			мудрость повсюду, где только может, то Codesophy пытается её закодировать.
			Чобы донести, упростить, объяснить и через это сделать частью наших знаний
			и навыков.
		</p>

		<p>
			Где бы не встретился код, там жизнь стала хоть немного, но лучше. Хороший
			навык Codesophy - как остро заточенный топор для дровосека.
		</p>

		<citate by="Abraham Lincoln">
			If I had 8 hours to chop down a tree, I would spend 6 of those hours
			sharpening my axe.
		</citate>
	</section>

	<h2>Содержание</h2>
	<ol>
		<li>Код вокруг нас</li>
		<li>CodeSophy vs Computer Science</li>
		<li>Исследование или симуляция</li>
		<li>Сущности и рождение ребёнка</li>
	</ol>

    <todo>
        <term id="codesophy">
            Навык преобразования полученного нами опыта в форму, удобную для
            запоминания, использования, обмена.
        </term>
    </todo>

    <p>
        Давайте закодируем наши первые знания:
    </p>

    <ul>
		<li>
			<todo>
				Начать кодировать стоит со знаний (над-эпистемологическая абстракция).
			</todo>
		</li>
        <li>
            <todo>
                Можно попробовать закодировать день. Задачи, календари и т.п.,
                что в унисон с нашими текущими вопросами касательно
                <![CDATA[ <todo>, <idea> ]]> и т.п.
            </todo>
        </li>
        <li>
            <todo>
                <strong>Наблюдение</strong>.
                Такое ощущение, что все философские споры об истинах, фактах,
                знаниях и т.п. сводятся к отсутствию однозначности. Все
                определяется условиями, субъектами, языком и т.п. Поэтому
                гарантированно мы можем говорить только о наблюдениях (что
                в части CS интересно трансформируется в Event Sourcing),
                а факт - суть консенсус (здравствуйте распределенные системы).
                Также можно рассмотреть RDF как способ кодирования наблюдений
                именно в таком ракурсе (субъект, пропозиция, объект).
            </todo>
        </li>
        <li>
            <a href="abstraction.xml">Абстракция</a>
        </li>
        <li>
            <a href="scope.xml">Область исследования</a>
        </li>
        <li>
            <todo>
                Хорошо бы описать понятия вроде: метод, процесс, ...
            </todo>
        </li>
    </ul>

    <todo>
        Когда концепцию удастся набросать, её стоит вынести в README.md
        репозитория Codesophy.
    </todo>

	<section title="Блог">
		<ul>
			<li>
				<a href="/blog/20181002-i-saw-the-sign.xml">2018-10-02 I saw the sign</a>
			</li>
		</ul>
	</section>
	
    <todo>
        Развить тему грамматик с плавным переходм к парсерам, DSL и языкам
        программирования (разделить языки по назначению).
    </todo>

    <todo>Логотип/Брендинг</todo>

    <todo>
        Infrastructure as a code, executable specifications, DSL. Потихоньку
        "кодирование" растёт из ИТ-отрасли. Хотя проще сразу сказать, что
        All as a code. Даже ежедневный органайзер - это своего рода код,
        как некоторое формализация.
    </todo>
	
	<todo>
		Фокус на "code", а не "computing" позволяет видеть шире и предвосхищать
		появление новых CPU. Помимо этого, он не фокусируется узко на алгоритмах
		или структурах данных. Уверяю вас, в современных системах знания стека,
		списка и т.п. не находятся в списке приоритетных. Вы имеете дело с гораздо
		более сложными структурами и связями. Computer Science учит нас об абстракциях,
		но сам ими не очень пользуется.
	</todo>
	
	<todo>
		Нумерованные и маркированные списки - хороший пример кодирования алгоритма.
		Последовательность и параллельность. Раньше в языке BASIC была нумерация
		строк и проблемы многопоточных программ.
	</todo>
</resource>
